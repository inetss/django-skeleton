#!/usr/bin/env bash

if [ -z "$*" ]; then
	cat >&2 <<END
Commands:

install               - install packages from requirements.txt (creates virtualenv on first invocation)
virtualenv            - open shell inside virtualenv
virtualenv <command>  - run <command> inside virtualenv (e.g. $0 virtualenv pip install foo)

Anything else is passed to Django manage.py, e.g.:

migrate               - apply Django migrations
runserver 8888        - run development server
END
	exit 1
fi

set -e

die() { >&2 echo -e $@; exit 1; }

cd $(dirname $(cd ${0%/*} && echo $PWD/${0##*/}))  # cd to own directory

VENV_PATH=${VENV_PATH:-var/venv}
if [ ! -f "$VENV_PATH/bin/activate" ]; then
	PYTHON_VARIANTS=$(cat requirements.txt |grep '^# python: '| sed -re 's/.*://')
	[ -n "$PYTHON_VARIANTS" ] || die "Add python variants to requirements.txt like this:\n# python: python3.5 python3.4"
	for v in $PYTHON_VARIANTS; do python=$(which "$v"; true); if [ -n "$python" ]; then break; fi; done
	[ -n "$python" ] || die "Could not find any of $PYTHON_VARIANTS"
	virtualenv --python="$python" "$VENV_PATH" || die "Failed to initialize virtualenv at $VENV_PATH"
fi

. "$VENV_PATH/bin/activate" || die "Failed to activate virtualenv at $VENV_PATH"

case "$1" in
install)
	pip install --disable-pip-version-check -r requirements.txt
	;;
virtualenv)
	shift
	if [ -z "$*" ]; then
		"$SHELL"
	else
		"$@"
	fi
	;;
*)
	DJANGO_SCRIPT=${DJANGO_SCRIPT:-src/manage.py}
	python "$DJANGO_SCRIPT" "$@"
	;;
esac
